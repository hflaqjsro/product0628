1. 개인
CREATE TABLE PERSONAL (
  pName varchar2 (100) not null,        -- 성명
  pID varchar2(15) primary key,         -- 아이디 (pk)
  pPW varchar2(20) not null,            -- 비밀번호
  pMail varchar2(30) not null,          -- 이메일
  pHP varchar2(15) not null,            -- 연락처
  birth date not null,                  -- 생년월일
  gender number check (gender between 1 and 2)          -- 성별(1:남, 2:여)
);
 


2. 이력서
(개인의 요소 중 테이블 연결에 쓰일 PK를 제외한 나머지 내용 생략) 

CREATE TABLE RESUME (
  rsNum varchar(8) CONSTRAINT resume_rsNum_nn_pk PRIMARY key, -- 이력서 고유번호 (pk)
  pNum varchar(8) CONSTRAINT resume_pNum_nn NOT NULL REFERENCES personal(pnum), -- 회원 고유번호 ◀ (일반회원DB 조인에 사용)
  rsTitle varchar(300) CONSTRAINT resume_rsTitle_nn NOT null, -- 이력서 제목
  profileImage varchar2(3000), -- 사진 URL
  email varchar2(100) CONSTRAINT resume_email_nn NOT null, -- 이메일 주소
  mobile varchar2(15) CONSTRAINT resume_mobile_nn NOT null,-- 휴대폰 번호
  tel varchar2(15),  -- 전화번호 
  address1 varchar2(300) CONSTRAINT resume_address1_nn NOT null, -- 회원의 주소 (Daum 주소 api의 roadAddress 받아옴)
  address2 varchar2(600), -- 회원의 상세주소
  education NUMBER REFERENCES education(eNum), -- 최종학력 (ex. 1:'초등학교 졸업', 2:'중학교 졸업' ..)
  career NUMBER REFERENCES career(cnum), -- 경력 (ex. 1:'신입', 2:'1~3년'..)
  salary NUMBER REFERENCES salary (snum), -- 연봉 (ex. 1:'회사 내규에 따름', 2:'~2000만원'..)
  occupation NUMBER REFERENCES occupation(onum), -- 희망직종 (ex. 100:'서비스업', 200:'금융,은행업'..)
  --area number(10) -- 희망지역 (법정동코드 ex. 1100000000:서울특별시, 1111000000:서울특별시 종로구, 1111010100:서울특별시 종로구 청운동)
  isVisible_resume number(1) -- 이력서 공개 여부 1:TRUE, 0:FALSE 
);  
 

--> 이름, 생년월일, 성별은 수정불가하므로 회원DB조인. 이메일주소와 휴대폰번호는 수정 가능.
※ 외부접근: 이력서 목록, 인재 검색(?)
  
  
  
3. 기업정보
CREATE TABLE COMPANYINFO (
  cName varchar2 (100) CONSTRAINT COMPANYINFO_cName_nn NOT NULL,        -- 기업명
  cNum varchar2 (8)  PRIMARY KEY,            -- 회원 고유번호(기업회원)
  industry varchar2 (200) CONSTRAINT COMPANYINFO_industry_nn NOT NULL,    -- 산업
  cIDNum varchar2 (50) CONSTRAINT COMPANYINFO_cIDNum_nn NOT NULL, -- 사업자등록번호
  employees number,            -- 사원수
  classification varchar2 (50), -- 구분
  builDate date,               -- 설립일
  capital varchar2 (100),      --자본금
  totSales varchar2 (100),     -- 매출액 
  CEO varchar2 (30) CONSTRAINT COMPANYINFO_CEO_nn NOT NULL,           -- CEO 성명 
  salary varchar2 (100),          -- 초임
  mainRole varchar2 (100),       -- 주요사업
  insurance varchar2 (50),       -- 보험
  website varchar2 (150),        -- 홈페이지
  address varchar2 (200) CONSTRAINT COMPANYINFO_address_nn NOT NULL,        -- 주소
  credit varchar2 (20),          -- 신용등급
  details varchar2 (500)                --상세소개
);

3-1. 기업회원 

CREATE TABLE COMPANY (
  cName varchar2 (100) not null,        -- 기업명
  cNum number primary key,            -- 사업자등록번호 (pk)
  cID varchar2(15) unique,            -- 인사담당 ID
  cPW varchar2(20) not null,            -- 인사담당 PW
  cMail varchar2(30) not null,          -- 인사담당 이메일
  cHP varchar2(15) not null            -- 인사담당 연락처
);



4. 채용공고
(기업정보의 요소 중 테이블 연결에 쓰일 PK를 제외한 나머지 내용 생략) 

CREATE TABLE RECRUIT (
  rcNum varchar(8) PRIMARY KEY , -- 채용공고 고유번호 (pk)
  cNum varchar(8)  CONSTRAINT recruit_cNum_nn NOT NULL REFERENCES company(cnum) , -- 회원 고유번호 ◀ (기업회원DB 조인에 사용)
  rcTitle varchar(300)  CONSTRAINT rcTitle_cNum_nn NOT NULL, -- 채용공고 제목
  deadline DATE  CONSTRAINT recruit_deadline_nn NOT NULL , -- 공고 마감일
  progress NUMBER  CONSTRAINT recruit_progress_nn NOT NULL, -- 상태 (ex. 1: 채용 진행중, 2:공고 마감)
  address1 varchar(300), -- 근무지 주소 (다음 주소 api의 roadAddress를 받아옴)
  address2 varchar(600), -- 근무지 상세주소
  --area varchar(300) -- 근무지역 (검색에서 사용됨. 다음 주소 api의 법정동코드bcode 받아옴.. ex.1111010100:서울특별시 종로구 청운동)
  career NUMBER REFERENCES career(cnum), -- 경력 (ex. 1:'신입', 2:'1~3년' ..)
  education NUMBER REFERENCES education(enum), -- 최종학력 (ex. 1:'초등학교 졸업', 2:'중학교 졸업' ..)
  empType NUMBER REFERENCES empType(etNum), -- 고용형태 (ex. 1: 정규직, 2: 계약직 ...) 
  occupation NUMBER REFERENCES occupation(onum), -- 산업 (ex. 100:'서비스업', 200:'금융,은행업'..)
  title NUMBER REFERENCES jobtitle(jtnum), --직급 (ex. 1:사원급, 2: 주임~대리급)
  position NUMBER REFERENCES jobposition(jpNum), --직책 (ex. 1:팀장/매니저/실장, 2:파트장/그룹장..)
  salary NUMBER REFERENCES salary(snum), -- 연봉 (ex. 1:'회사 내규에 따름', 2:'~2000만원'..)
  dept varchar2(100), --직무
  prefer varchar2(300) -- 우대조건
);

--> 기업명, 기업형태 등은 수정할 수 없는 값이므로 join해서 출력
※ 외부접근: 채용공고 목록, 채용상세, 직무&지역찾기, 상세검색, 기업정보



5. 커뮤니티 
 
 CREATE TABLE COMMUNITY (
  pID varchar2(15),          -- 개인아이디
  postNum number,            -- 게시글번호
  postTitle varchar2 (100)   -- 게시글제목
  postText varchar2 (3000)   -- 게시글내용
  postTag varchar2 (50)      -- 게시글태그

);

 6. 접수
CREATE TABLE RECEIVED(
  cName varchar2(100) not null,      -- 기업명
  rNum varchar2(8) not null,        -- 채용공고 코드
  pName varchar2(100) not null,      --지원자 이름
  rsNum varchar2(8) not null         --이력서 코드
);


--------<ref table>--------------
<gender>
1 : 남자
2 : 여자

<education>
1 : 초졸
2 : 중졸
3 : 고졸
4 : 대졸 이상

<career>
1 : 신입
2 : (1~3년)
3 : (4~6년)
4 : (7~9년)
5 : (10~15년)
6 : (16~20년) 
컬럼: cNum, hiCar, loCar, cStr

<occupation>(희망)직종
100 : 서비스업
200 : 금융업
300 : IT/정보통신
400 : 판매유통
500 : 제조생산
600 : 교육
700 : 건설
800 : 의료/제약
900 : 미디어/예술

<sal> (희망)연봉
1 : 회사 내규에 따름
2 : ~2000
3 : 2001~3000
4 : 3001~4000
5 : 4001~5000
6 : 5001~6000
7 : 6001~99999
8 : 면접 후 결정
컬럼: sNum, losal, hisal, sStr

<progress>
1 : 채용중
2 : 마감

<empType>고용형태
1 : 정규직
2 : 계약직
3 : 인턴
4 : 프리랜서
5 : 아르바이트

<title> 직급
1 : 사원급
2 : 대리급
3 : 과장급
4 : 부장급
5 : 임원

<position> 직책
0 : 해당없음
1 : 팀장
2 : 파트장
3 : 센터장
4 : 지점장
