1. 개인
CREATE TABLE PERSONAL (
  pName varchar2 (100),        -- 성명
  pID varchar2(15),            -- 아이디 
  pPW varchar2(20),            -- 비밀번호
  pMail varchar2(30),          -- 이메일
  pHP varchar2(15),            -- 연락처
  birth date,                  -- 생년월일
  gender number                -- 성별(1:남, 2:여)
);
 


2. 이력서
(개인의 요소 중 테이블 연결에 쓰일 PK를 제외한 나머지 내용 생략) 

CREATE TABLE RESUME (
  rsNum varchar(8) -- 이력서 고유번호 (pk)
  pNum varchar(8) -- 회원 고유번호 ◀ (일반회원DB 조인에 사용)
  rsTitle varchar(300) -- 이력서 제목
  profileImage varchar2(3000) -- 사진 URL
  email varchar2(100) -- 이메일 주소
  isVerified_email boolean -- 이메일 인증 여부
  mobile varchar2(15) -- 휴대폰 번호
  isAborad_mobile boolean -- 해외거주 여부
  isVerified_mobile boolean -- 휴대폰 인증 여부
  tel varchar2(15)  -- 전화번호 
  address1 varchar2(300) -- 회원의 주소 (Daum 주소 api의 roadAddress 받아옴)
  address2 varchar2(600) -- 회원의 상세주소
  isAbroad_address boolean -- 해외거주 여부
  education number -- 최종학력 (ex. 1:"초등학교 졸업", 2:"중학교 졸업" ..)
  career number -- 경력 (ex. 1:"신입", 2:"1~3년"..)
  salary number -- 연봉 (ex. 1:"회사 내규에 따름", 2:"~2000만원"..)
  occupation number -- 희망직종 (ex. 100:"서비스업", 200:"금융,은행업"..)
  area number -- 희망지역 (법정동코드 ex. 1100000000:서울특별시, 1111000000:서울특별시 종로구, 1111010100:서울특별시 종로구 청운동)
  isVisible_resume boolean -- 이력서 공개 여부
  
  그 외 생략
);  
 

--> 이름, 생년월일, 성별은 수정불가하므로 회원DB조인. 이메일주소와 휴대폰번호는 수정 가능.
※ 외부접근: 이력서 목록, 인재 검색(?)
  
  
  
3. 기업정보
CREATE TABLE COMPANYINFO (
  cName varchar2 (100),        -- 기업명
  industry varchar2 (200),     -- 산업
  employees number,            -- 사원수
  classification varchar2 (50) -- 구분
  builDate date,               -- 설립일
  capital varchar2 (100),      --자본금
  totSales varchar2 (100),     -- 매출액 
  CEO varchar2 (30),           -- CEO 성명 
  sal varchar2 (100),          -- 초임
  mainRole varchar(100),       -- 주요사업
  insurance varchar(50),       -- 보험
  website varchar(150),        -- 홈페이지
  address varchar(200),        -- 주소
  credit varchar(20),          -- 신용등급
  details (500)                --상세소개
);

3-1. 기업회원 

CREATE TABLE COMPANY (
  cName varchar2 (100),        -- 기업명
  cNum,                         -- 사업자등록번호
  cID,                          -- 인사담당 ID
  cPW,                          -- 인사담당 PW
  cMail,                        -- 인사담당 이메일
  cHP                          -- 인사담당 연락처
);



4. 채용공고
(기업정보의 요소 중 테이블 연결에 쓰일 PK를 제외한 나머지 내용 생략) 

CREATE TABLE RECRUIT (
  rcNum varchar(8) -- 채용공고 고유번호 (pk)
  cNum varchar(8) -- 회원 고유번호 ◀ (기업회원DB 조인에 사용)
  rcTitle varchar(300) -- 채용공고 제목
  deadline date -- 공고 마감일
  progress number -- 상태 (ex. 1: 채용 진행중, 2:공고 마감)
  address1 varchar(300) -- 근무지 주소 (다음 주소 api의 roadAddress를 받아옴)
  address2 varchar(600) -- 근무지 상세주소
  area number -- 근무지역 (검색에 쓰임. 다음 주소 api의 법정동코드bcode 받아옴.. ex.1111010100:서울특별시 종로구 청운동)
  career number -- 경력 (ex. 1:"신입", 2:"1~3년" ..)
  education number -- 최종학력 (ex. 1:"초등학교 졸업", 2:"중학교 졸업" ..)
  empType number -- 고용형태 (ex. 1: 정규직, 2: 계약직 ...) 
  occupation number -- 산업 (ex. 100:"서비스업", 200:"금융,은행업"..)
  title number --직급 (ex. 1:사원급, 2: 주임~대리급)
  position number --직책 (ex. 1:팀장/매니저/실장, 2:파트장/그룹장..)
  dept varchar2(100) --직무
  -- age 보류..
  -- gender 보류..
  prefer varchar2(300) -- 우대조건

  그 외 생략
);

--> 기업명, 기업형태 등은 수정할 수 없는 값이므로 join해서 출력
※ 외부접근: 채용상세, 직무&지역찾기, 상세검색, 기업정보



5. 커뮤니티 
 아이디 () - 개인의 아이디와 연동하여 조인할 예정 또는 개인의 고유번호가 있다면 그것과 연동할 예정입니다.
 
 
 CREATE TABLE COMMUNITY (
  postNum number,            -- 게시글번호
  postTitle varchar2 (100)   -- 게시글제목
  postText varchar2 (3000)   -- 게시글내용
  postTag varchar2 (50)      -- 게시글태그

);

 6. 접수
CREATE TABLE RECEIVED(
  cName varchar2(100),      -- 기업명
  rNum varchar2(8),        -- 채용공고 코드
  pName varchar2(100),      --지원자 이름
  rsNum varchar2(8)         --이력서 코드
);
